name: Deploy AWS Infrastructure with Terraform

on:
  push:
    tags:
      - 'deploy-dev'
      - 'deploy-prod'

  workflow_dispatch:
    inputs:
      stage:
        description: 'Stage'
        required: true
        type: choice
        options:
          - dev
          - prod

env:
  TERRAFORM_VERSION: "1.7.5"
  AWS_REGION: "ap-south-2"
  AWS_SDK_LOAD_CONFIG: "1"
  S3_BACKEND_BUCKET_NAME: "terraform-state-buckettt"

jobs:
  deploy_or_update:
    runs-on: [self-hosted, ubuntu, ec2]
    permissions:
      contents: read
    timeout-minutes: 30
    env:
      STAGE: ${{ github.event.inputs.stage || 'dev' }}
      LOG_FILE: /home/ubuntu/runnerlog/${{ github.event.inputs.stage || 'dev' }}/${{ github.run_id }}.log

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Lambda Deployment Packages
        run: |
          chmod +x userscripts/build_lambda_zips.sh
          ./userscripts/build_lambda_zips.sh > lambda_build.log 2>&1
          cat lambda_build.log >> "$LOG_FILE"
        working-directory: ./

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init & Workspace Setup
        run: |
          terraform init \
            -backend-config="bucket=${{ env.S3_BACKEND_BUCKET_NAME }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="key=terraform/${{ env.STAGE }}/terraform.tfstate" > init.log 2>&1
          cat init.log >> "$LOG_FILE"

          if terraform workspace list | grep -q " ${STAGE}$"; then
            terraform workspace select "$STAGE" > workspace.log 2>&1
          else
            terraform workspace new "$STAGE" > workspace.log 2>&1
          fi
          cat workspace.log >> "$LOG_FILE"
        working-directory: ./Terraform

      - name: Select tfvars file for stage
        run: |
          if [[ "$STAGE" == "dev" ]]; then
            TFVARS_FILE="../configs/dev.tfvars"
          elif [[ "$STAGE" == "prod" ]]; then
            TFVARS_FILE="../configs/prod.tfvars"
          else
            echo "Unknown stage $STAGE" > tfvars.log
            exit 1
          fi
          echo "TFVARS_FILE=$TFVARS_FILE" >> $GITHUB_ENV
          echo "Selected tfvars: $TFVARS_FILE" > tfvars.log
          cat tfvars.log >> "$LOG_FILE"
        working-directory: ./Terraform

      - name: Terraform Validate
        run: |
          terraform validate > validate.log 2>&1
          cat validate.log >> "$LOG_FILE"
        working-directory: ./Terraform

      - name: Terraform Plan
        env:
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          terraform plan -var-file=${{ env.TFVARS_FILE }} \
            -var="ec2_ssh_private_key=${EC2_SSH_PRIVATE_KEY}" \
            -out=tfplan > plan.log 2>&1
          cat plan.log >> "$LOG_FILE"
        working-directory: ./Terraform

      - name: Terraform Apply & Capture Output
        env:
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          terraform apply -auto-approve tfplan > apply.log 2>&1
          cat apply.log >> "$LOG_FILE"
        working-directory: ./Terraform

      - name: Get EC2 Public IP/DNS
        run: |
          PUBLIC_IP=$(terraform output -raw instance_public_ip)
          if [ -z "$PUBLIC_IP" ]; then
            echo "ERROR: No public IP found." >> "$LOG_FILE"
            exit 1
          fi
          echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "Public IP: $PUBLIC_IP" >> "$LOG_FILE"
        working-directory: ./Terraform

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          echo "SSH key setup complete." >> "$LOG_FILE"

      - name: Save Terraform Apply Output to EC2 Log Directory
        run: |
          echo "=== Terraform Apply Log (${STAGE}) ===" >> "$LOG_FILE"
          cat ./Terraform/tfplan_output.log >> "$LOG_FILE"
        continue-on-error: true

      - name: Validate Application Health Post-Deployment
        if: success() && env.EC2_PUBLIC_IP != ''
        run: |
          echo "Checking health at http://${{ env.EC2_PUBLIC_IP }}/actuator/health..." >> "$LOG_FILE"
          for i in {1..40}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://${{ env.EC2_PUBLIC_IP }}/actuator/health")
            echo "Retry $i: HTTP $STATUS" >> "$LOG_FILE"
            if [ "$STATUS" -eq 200 ]; then
              echo "App is healthy." >> "$LOG_FILE"
              exit 0
            fi
            sleep 30
          done
          echo "App did not become healthy." >> "$LOG_FILE"
          exit 1

      - name: Final Log Marker
        run: echo "âœ… CI/CD pipeline completed for stage: $STAGE" >> "$LOG_FILE"
